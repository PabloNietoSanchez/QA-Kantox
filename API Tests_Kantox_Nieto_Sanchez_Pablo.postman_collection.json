{
	"info": {
		"_postman_id": "655a78e9-141a-4d88-a0ce-7c3f30d77658",
		"name": "API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44165775",
		"_collection_link": "https://pablonieto-5872851.postman.co/workspace/Pablo-Nieto's-Workspace~7b46311d-5f48-44e7-8d11-c7301852ffeb/collection/44165775-655a78e9-141a-4d88-a0ce-7c3f30d77658?action=share&source=collection_link&creator=44165775"
	},
	"item": [
		{
			"name": "Posts - Does It work - Tests",
			"item": [
				{
					"name": "Get All Posts - Check current content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Revisa el estatus de la respuesta\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"‚úÖ Status code is 200\");\r",
									"});\r",
									"\r",
									"//Revisa que la respuesta que te esta dando es un array [No sirve de nada hablar si no hablamos el mismo idioma]\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    console.log(\"‚úÖ Response is an array\");\r",
									"});\r",
									"\r",
									"// Revisa que cada Post tenga la propiedad ID - Tener datos sin identificador puede causar problemas\r",
									"pm.test(\"Each post has 'id' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const postsWithoutId = jsonData.filter(post => !post.hasOwnProperty('id'));\r",
									"    \r",
									"    if (postsWithoutId.length === 0) {\r",
									"        console.log(\"‚úÖ Todos los posts tienen propiedad 'id'\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${postsWithoutId.length} posts sin 'id':`);\r",
									"        postsWithoutId.forEach((post, index) => {\r",
									"            console.log(`- Post en posici√≥n ${index}:`, post);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(postsWithoutId.length).to.eql(0, `Se encontraron ${postsWithoutId.length} posts sin 'id'`);\r",
									"});\r",
									"\r",
									"//Revisa que cada post tenga la propiedad Titulo - No se como funciona la API o para que se va a usar asi que alomejor esto causa problemas\r",
									"pm.test(\"Each post has 'title' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const postsWithoutTitle = jsonData.filter(post => !post.hasOwnProperty('title'));\r",
									"    \r",
									"    if (postsWithoutTitle.length === 0) {\r",
									"        console.log(\"‚úÖ Todos los posts tienen propiedad 'title'\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${postsWithoutTitle.length} posts sin 'title':`);\r",
									"        postsWithoutTitle.forEach(post => {\r",
									"            console.log(`- ID: ${post.id || 'sin ID'}, Post:`, post);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(postsWithoutTitle.length).to.eql(0, `Se encontraron ${postsWithoutTitle.length} posts sin 'title'`);\r",
									"});\r",
									"\r",
									"//Revisa que cada post tenga la propiedad Autor - No se como funciona la API o para que se va a usar asi que alomejor esto causa problemas\r",
									"\r",
									"pm.test(\"Each post has 'author' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const postsWithoutAuthor = jsonData.filter(post => !post.hasOwnProperty('author'));\r",
									"    \r",
									"    if (postsWithoutAuthor.length === 0) {\r",
									"        console.log(\"‚úÖ Todos los posts tienen propiedad 'author'\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${postsWithoutAuthor.length} posts sin 'author':`);\r",
									"        postsWithoutAuthor.forEach(post => {\r",
									"            console.log(`- ID: ${post.id || 'sin ID'}, Post:`, post);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(postsWithoutAuthor.length).to.eql(0, `Se encontraron ${postsWithoutAuthor.length} posts sin 'author'`);\r",
									"});\r",
									"\r",
									"//Revisa que no haya posts con una ID en comun ya que esto puede provocar fallos en el sistema\r",
									"pm.test(\"No hay posts con ID duplicado\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const ids = jsonData.map(post => post.id);\r",
									"    const seen = new Set();\r",
									"    const duplicates = [];\r",
									"\r",
									"    ids.forEach(id => {\r",
									"        if (seen.has(id)) {\r",
									"            duplicates.push(id);\r",
									"        } else {\r",
									"            seen.add(id);\r",
									"        }\r",
									"    });\r",
									"\r",
									"    if (duplicates.length === 0) {\r",
									"        console.log(\"‚úÖ No hay IDs duplicadas\");\r",
									"    } else {\r",
									"        console.log(`‚ùå Se encontraron ${duplicates.length} IDs duplicadas:`);\r",
									"        duplicates.forEach(dup => {\r",
									"            console.log(`- ID duplicada: ${dup}`);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(duplicates.length).to.eql(0, `Se encontraron ${duplicates.length} IDs duplicadas`);\r",
									"});\r",
									"\r",
									"pm.test(\"Mostrar contenido completo de todos los posts\", function () {\r",
									"    const data = pm.response.json();\r",
									"    console.log(\"üìã Contenido completo de todos los posts:\");\r",
									"    console.log(JSON.stringify(data, null, 2)); // Formato legible\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Posts - Create a new post to play with",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Mismo c√≥digo de status para comprobar que o bien se ha creado el post [201], o todo est√° OK [200]\r",
									"pm.test(\"Status code es 201 o 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    console.log(\"Post creado correctamente\");\r",
									"});\r",
									"\r",
									"//Revisa que la respuesta contiene el post que se acaba de crear con sus propiedades b√°sicas.\r",
									"//Si no coincide lo que se devuelve con lo que se pidi√≥, hay alg√∫n problema en la l√≥gica del endpoint o los datos\r",
									"pm.test(\"La respuesta contiene el post creado\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"id\", \"1234\");\r",
									"    pm.expect(responseData).to.have.property(\"title\", \"Mi Nuevo Post de Prueba\");\r",
									"    pm.expect(responseData).to.have.property(\"author\", \"Tu Nombre\");\r",
									"\r",
									"    //Se a√±ade un console.log para tener una referencia clara de qu√© devolvi√≥ exactamente la API al crear el post\r",
									"    console.log(\"Post creado con √©xito:\");\r",
									"    console.log(responseData);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"1234\",\r\n    \"title\": \"Mi Nuevo Post de Prueba\",\r\n    \"author\": \"Tu Nombre\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Posts ID - Check if the Post got Created Succesfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica que el status code sea 200 - el post se ha encontrado correctamente\r",
									"pm.test(\"Status code is 200 - Post creado y recuperado\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    console.log(\"‚úÖ Post recuperado correctamente tras creaci√≥n\");\r",
									"});\r",
									"\r",
									"// Comprueba que el contenido coincide con lo que se envi√≥ al crear el post\r",
									"pm.test(\"Post tiene los datos esperados tras creaci√≥n\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data).to.have.property(\"id\", \"1234\");\r",
									"    pm.expect(data).to.have.property(\"title\", \"Mi Nuevo Post de Prueba\");\r",
									"    pm.expect(data).to.have.property(\"author\", \"Tu Nombre\");\r",
									"\r",
									"    console.log(\"üìÑ Contenido del post tras creaci√≥n:\");\r",
									"    console.log(data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts/1234",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"1234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Posts - Modify the Created Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica que el status code sea 200, lo que indica que el post existe y se ha obtenido correctamente\r",
									"pm.test(\"Status code is 200 - Post existe\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    console.log(\"Post encontrado correctamente\");\r",
									"});\r",
									"\r",
									"// Comprueba que el post recibido contiene los datos esperados (id, t√≠tulo y autor actualizados)\r",
									"pm.test(\"Post tiene los datos esperados\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data).to.have.property(\"id\", \"1234\");\r",
									"    pm.expect(data).to.have.property(\"title\", \"T√≠tulo Actualizado\");\r",
									"    pm.expect(data).to.have.property(\"author\", \"Tu Nombre Actualizado\");\r",
									"\r",
									"    // Se a√±ade un console.log para tener una referencia clara de qu√© devolvi√≥ exactamente la API al consultar el post\r",
									"    console.log(\"Contenido del post:\");\r",
									"    console.log(data);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"1234\",\r\n    \"title\": \"T√≠tulo Actualizado\",\r\n    \"author\": \"Tu Nombre Actualizado\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts/1234",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"1234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Posts ID - Check if the Post got Modified",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verifica que el status code sea 200, lo que indica que el post existe y se ha obtenido correctamente\r",
									"pm.test(\"Status code is 200 - Post existe\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    console.log(\"Post encontrado correctamente\");\r",
									"});\r",
									"\r",
									"//Comprueba que el post recibido contiene los datos esperados (id, t√≠tulo y autor actualizados)\r",
									"pm.test(\"Post tiene los datos esperados\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data).to.have.property(\"id\", \"1234\");\r",
									"    pm.expect(data).to.have.property(\"title\", \"T√≠tulo Actualizado\");\r",
									"    pm.expect(data).to.have.property(\"author\", \"Tu Nombre Actualizado\");\r",
									"\r",
									"    //Se a√±ade un console.log para tener una referencia clara de qu√© devolvi√≥ exactamente la API al consultar el post\r",
									"    console.log(\"Contenido del post:\");\r",
									"    console.log(data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts/1234",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"1234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Posts - Check If we have accidentally created more than 1 TestPost",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Filtra los posts con id '1234' dentro de la respuesta para asegurarse de que existen\r",
									"pm.test(\"Mostrar posts con id '1234'\", function () {\r",
									"    const data = pm.response.json();\r",
									"    const filtered = data.filter(p => p.id === \"1234\");\r",
									"\r",
									"    //Si se encuentran, se muestran por consola para confirmar que est√°n bien devueltos\r",
									"    if (filtered.length > 0) {\r",
									"        console.log(\"Posts con id '1234':\", filtered);\r",
									"    } else {\r",
									"        //Si no se encuentra ninguno, tambi√©n se informa por consola para facilitar el an√°lisis\r",
									"        console.log(\"No se encontraron posts con id '1234'\");\r",
									"    }\r",
									"\r",
									"    //Se supone que al menos deberia habere un post con esa id\r",
									"    pm.expect(filtered.length).to.be.at.least(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Posts ID - Delete the created post to clean up the API content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Se comprueba que el c√≥digo de respuesta sea 200 (OK) o 204 (sin contenido), ambos v√°lidos tras una eliminaci√≥n exitosa\r",
									"pm.test(\"Status code es 200 o 204 - Post eliminado\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"\r",
									"    //Se a√±ade un console.log para confirmar visualmente que la eliminaci√≥n se ha realizado\r",
									"    console.log(\"Post con id '1234' eliminado correctamente\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts/1234",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"1234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Posts - We Check current content to see if we have \"cleaned\" properly",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Revisa el estatus de la respuesta\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"‚úÖ Status code is 200\");\r",
									"});\r",
									"\r",
									"//Revisa que la respuesta que te esta dando es un array [No sirve de nada hablar si no hablamos el mismo idioma]\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    console.log(\"‚úÖ Response is an array\");\r",
									"});\r",
									"/*\r",
									"// Revisa que cada Post tenga la propiedad ID - Tener datos sin identificador puede causar problemas\r",
									"pm.test(\"Each post has 'id' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const postsWithoutId = jsonData.filter(post => !post.hasOwnProperty('id'));\r",
									"    \r",
									"    if (postsWithoutId.length === 0) {\r",
									"        console.log(\"‚úÖ Todos los posts tienen propiedad 'id'\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${postsWithoutId.length} posts sin 'id':`);\r",
									"        postsWithoutId.forEach((post, index) => {\r",
									"            console.log(`- Post en posici√≥n ${index}:`, post);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(postsWithoutId.length).to.eql(0, `Se encontraron ${postsWithoutId.length} posts sin 'id'`);\r",
									"});\r",
									"\r",
									"//Revisa que cada post tenga la propiedad Titulo - No se como funciona la API o para que se va a usar asi que alomejor esto causa problemas\r",
									"pm.test(\"Each post has 'title' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const postsWithoutTitle = jsonData.filter(post => !post.hasOwnProperty('title'));\r",
									"    \r",
									"    if (postsWithoutTitle.length === 0) {\r",
									"        console.log(\"‚úÖ Todos los posts tienen propiedad 'title'\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${postsWithoutTitle.length} posts sin 'title':`);\r",
									"        postsWithoutTitle.forEach(post => {\r",
									"            console.log(`- ID: ${post.id || 'sin ID'}, Post:`, post);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(postsWithoutTitle.length).to.eql(0, `Se encontraron ${postsWithoutTitle.length} posts sin 'title'`);\r",
									"});\r",
									"\r",
									"//Revisa que cada post tenga la propiedad Autor - No se como funciona la API o para que se va a usar asi que alomejor esto causa problemas\r",
									"\r",
									"pm.test(\"Each post has 'author' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const postsWithoutAuthor = jsonData.filter(post => !post.hasOwnProperty('author'));\r",
									"    \r",
									"    if (postsWithoutAuthor.length === 0) {\r",
									"        console.log(\"‚úÖ Todos los posts tienen propiedad 'author'\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${postsWithoutAuthor.length} posts sin 'author':`);\r",
									"        postsWithoutAuthor.forEach(post => {\r",
									"            console.log(`- ID: ${post.id || 'sin ID'}, Post:`, post);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(postsWithoutAuthor.length).to.eql(0, `Se encontraron ${postsWithoutAuthor.length} posts sin 'author'`);\r",
									"});\r",
									"*/\r",
									"//Revisa que no haya posts con una ID en comun ya que esto puede provocar fallos en el sistema\r",
									"pm.test(\"No hay posts con ID duplicado\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const ids = jsonData.map(post => post.id);\r",
									"    const seen = new Set();\r",
									"    const duplicates = [];\r",
									"\r",
									"    ids.forEach(id => {\r",
									"        if (seen.has(id)) {\r",
									"            duplicates.push(id);\r",
									"        } else {\r",
									"            seen.add(id);\r",
									"        }\r",
									"    });\r",
									"\r",
									"    if (duplicates.length === 0) {\r",
									"        console.log(\"‚úÖ No hay IDs duplicadas\");\r",
									"    } else {\r",
									"        console.log(`‚ùå Se encontraron ${duplicates.length} IDs duplicadas:`);\r",
									"        duplicates.forEach(dup => {\r",
									"            console.log(`- ID duplicada: ${dup}`);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(duplicates.length).to.eql(0, `Se encontraron ${duplicates.length} IDs duplicadas`);\r",
									"});\r",
									"//Muestra el contenido total de todos los posts en la consola - Esto es √∫til para depurar y asegurarse de que los datos son correctos.\r",
									"pm.test(\"Mostrar contenido completo de todos los posts\", function () {\r",
									"    const data = pm.response.json();\r",
									"    console.log(\"üìã Contenido completo de todos los posts:\");\r",
									"    console.log(JSON.stringify(data, null, 2)); // Formato legible\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			],
			"description": "I created a TestFlow that tests whether you can interact normally with the API to create, modify, review, and delete info from it"
		},
		{
			"name": "Posts - It Breaks?",
			"item": [
				{
					"name": "Get by Tests",
					"item": [
						{
							"name": "Same ID Test",
							"item": [
								{
									"name": "Post Posts - Create a new post to play with",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Mismo c√≥digo de status para comprobar que o bien se ha creado el post [201], o todo est√° OK [200]\r",
													"pm.test(\"Status code is 201 o 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"    console.log(\"‚úÖ Post creado correctamente\");\r",
													"});\r",
													"\r",
													"// Se comprueba que la respuesta de la API contiene las propiedades correctas del post creado\r",
													"pm.test(\"La respuesta contiene el post creado\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    // Se verifica que el objeto tenga las propiedades esperadas\r",
													"    pm.expect(responseData).to.have.property(\"id\", \"1234\");\r",
													"    pm.expect(responseData).to.have.property(\"title\", \"Mi Nuevo Post de Prueba\");\r",
													"    pm.expect(responseData).to.have.property(\"author\", \"Tu Nombre\");\r",
													"\r",
													"    // Se a√±ade un console.log para tener una referencia clara de qu√© devolvi√≥ exactamente la API al crear el post\r",
													"    console.log(\"üì¶ Post creado con √©xito:\");\r",
													"    console.log(responseData);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"1234\",\r\n    \"title\": \"Mi Nuevo Post de Prueba\",\r\n    \"author\": \"Tu Nombre\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/posts",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Posts - Create a second post to play with",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Mismo c√≥digo de status para comprobar que o bien se ha creado el post [201], o todo est√° OK [200]\r",
													"pm.test(\"Status code is 201 o 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"    console.log(\"‚úÖ Post creado correctamente\");\r",
													"});\r",
													"\r",
													"// Se comprueba que la respuesta de la API contiene los datos del post que hemos enviado\r",
													"pm.test(\"La respuesta contiene el post creado\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property(\"id\", \"1234\");\r",
													"    pm.expect(responseData).to.have.property(\"title\", \"Mi Nuevo Post de Prueba\");\r",
													"    pm.expect(responseData).to.have.property(\"author\", \"Tu Nombre\");\r",
													"\r",
													"    // Se a√±ade un console.log para tener una referencia clara de qu√© devolvi√≥ exactamente la API al crear el post\r",
													"    console.log(\"üì¶ Post creado con √©xito:\");\r",
													"    console.log(responseData);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"1234\",\r\n    \"title\": \"Mi Nuevo Post de Prueba\",\r\n    \"author\": \"Tu Nombre\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/posts",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get by ID - 2 Posts Same ID?",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Se verifica que al hacer GET con un ID existente, se devuelve el post correcto\r",
													"pm.test(\"GET por ID existente - Post 2\", function () {\r",
													"    const post = pm.response.json();\r",
													"\r",
													"    pm.expect(post.id).to.eql(\"2\");\r",
													"    pm.expect(post.title).to.eql(\"Post 2\");\r",
													"    pm.expect(post.author).to.eql(\"Author 2\");\r",
													"\r",
													"    // Se muestra por consola el post devuelto para comprobar que los datos coinciden con lo esperado\r",
													"    console.log(\"‚úÖ Post con ID 2 encontrado correctamente:\", post);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/posts/2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"posts",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Posts ID - Delete the created post to clean up the API content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Se comprueba que el c√≥digo de estado sea 200 o 204, ambos v√°lidos para una eliminaci√≥n correcta\r",
													"pm.test(\"Status code es 200 o 204 - Post eliminado\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"\r",
													"    // Se muestra un mensaje por consola para confirmar que el post fue eliminado\r",
													"    console.log(\"üóëÔ∏è Post con id '1234' eliminado correctamente\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/posts/1234",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"posts",
												"1234"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Posts ID - Delete the created post to clean up the API content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Se comprueba que el c√≥digo de estado sea 200 o 204, lo cual indica que el post fue eliminado correctamente\r",
													"pm.test(\"Status code es 200 o 204 - Post eliminado\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"\r",
													"    // Se a√±ade un console.log para confirmar que la eliminaci√≥n del post se ha hecho correctamente\r",
													"    console.log(\"üóëÔ∏è Post con id '1234' eliminado correctamente\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/posts/1234",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"posts",
												"1234"
											]
										}
									},
									"response": []
								}
							],
							"description": "The 'same ID' test is supposed to see what the output is when you ask the API to return an item with a shared ID. I expected both items to appear, but it only returned the first one it found."
						},
						{
							"name": "Get by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET por ID existente - Post 2\", function () {\r",
											"    const post = pm.response.json();\r",
											"    pm.expect(post.id).to.eql(\"2\");\r",
											"    pm.expect(post.title).to.eql(\"Post 2\");\r",
											"    pm.expect(post.author).to.eql(\"Author 2\");\r",
											"    console.log(\"‚úÖ Post con ID 2 encontrado correctamente:\", post);\r",
											"});\r",
											"//Verificas que la informacion del post buscado coincida con la informacion del post que estas buscando"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que se han encontrado posts con el t√≠tulo 'Post 2'\r",
											"pm.test(\"GET por t√≠tulo - 'Post 2'\", function () {\r",
											"    const posts = pm.response.json();\r",
											"    pm.expect(posts.length).to.be.above(0); // Verificamos que se han encontrado posts\r",
											"    console.log(\"‚úÖ Posts encontrados por t√≠tulo:\", posts); // Se a√±ade un console.log para visualizar los posts encontrados\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts?title=Post 2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts"
									],
									"query": [
										{
											"key": "title",
											"value": "Post 2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que se han encontrado posts con el autor 'Author 2'\r",
											"pm.test(\"GET por autor - 'Author 2'\", function () {\r",
											"    const posts = pm.response.json();\r",
											"    pm.expect(posts.length).to.be.above(0); // Verificamos que se han encontrado posts\r",
											"    console.log(\"‚úÖ Posts encontrados por autor:\", posts); // Se a√±ade un console.log para visualizar los posts encontrados\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts?author=Author 2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts"
									],
									"query": [
										{
											"key": "author",
											"value": "Author 2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by ID - No ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que al buscar un ID inexistente se reciba un c√≥digo 404 o un 200 con contenido vac√≠o\r",
											"pm.test(\"GET by ID inexistente devuelve 404 o vac√≠o\", function () {\r",
											"    const status = pm.response.code;\r",
											"    if (status === 404) {\r",
											"        console.log(\"‚úÖ Recurso con ID inexistente no encontrado. C√≥digo 404.\"); // Se espera que el ID no exista y se devuelva un 404\r",
											"    } else if (status === 200 && !pm.response.json()) {\r",
											"        console.log(\"‚ö†Ô∏è C√≥digo 200 pero sin contenido. Recurso con ID no existe.\"); // Se maneja el caso en que el c√≥digo sea 200 pero no haya contenido\r",
											"    } else {\r",
											"        console.log(\"‚ùå Comportamiento inesperado al buscar ID inexistente. C√≥digo:\", status); // Para cualquier otro comportamiento inesperado\r",
											"    }\r",
											"    pm.expect([404, 200]).to.include(status); // Aseguramos que el c√≥digo de estado sea 404 o 200\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by Title - No Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que al hacer un GET por un t√≠tulo inexistente, se reciba un array vac√≠o\r",
											"pm.test(\"GET by title inexistente devuelve array vac√≠o\", function () {\r",
											"    const data = pm.response.json();\r",
											"    const status = pm.response.code;\r",
											"\r",
											"    // Se verifica si la respuesta es un array vac√≠o, lo cual indica que no se encontraron posts con el t√≠tulo especificado\r",
											"    if (Array.isArray(data) && data.length === 0) {\r",
											"        console.log(\"‚úÖ No se encontr√≥ ning√∫n post con ese t√≠tulo.\");\r",
											"    } else {\r",
											"        // Si se devuelven posts, significa que la API no est√° filtrando correctamente los resultados seg√∫n el t√≠tulo\r",
											"        console.log(\"‚ùå Se devolvieron posts que no deber√≠an existir:\", data);\r",
											"    }\r",
											"\r",
											"    pm.expect(status).to.eql(200); // Se asegura que el c√≥digo de estado sea 200\r",
											"    pm.expect(data.length).to.eql(0); // Se asegura que el array devuelto est√© vac√≠o\r",
											"});\r",
											"\r",
											"// La idea de este test era ver qu√© ocurr√≠a al hacer un GET por un t√≠tulo inexistente, con el objetivo de ver si la API devolv√≠a un array vac√≠o. Sin embargo, la API devuelve todos los elementos que no tienen un autor o t√≠tulo que coincidan con el valor buscado. As√≠ que este test tambi√©n permite detectar esos elementos.\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts?title=Post 3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts"
									],
									"query": [
										{
											"key": "title",
											"value": "Post 3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by author - No Author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET by title inexistente devuelve array vac√≠o\", function () {\r",
											"    const data = pm.response.json();\r",
											"    const status = pm.response.code;\r",
											"\r",
											"    // Se verifica si la respuesta es un array vac√≠o, lo cual indica que no se encontraron posts con el t√≠tulo especificado\r",
											"    if (Array.isArray(data) && data.length === 0) {\r",
											"        console.log(\"‚úÖ No se encontr√≥ ning√∫n post con ese t√≠tulo.\");\r",
											"    } else {\r",
											"        // Si se devuelven posts, significa que la API no est√° filtrando correctamente los resultados seg√∫n el t√≠tulo\r",
											"        console.log(\"‚ùå Se devolvieron posts que no deber√≠an existir:\", data);\r",
											"    }\r",
											"\r",
											"    pm.expect(status).to.eql(200); // Se asegura que el c√≥digo de estado sea 200\r",
											"    pm.expect(data.length).to.eql(0); // Se asegura que el array devuelto est√© vac√≠o\r",
											"});\r",
											"\r",
											"// La idea de este test era ver qu√© ocurr√≠a al hacer un GET por un t√≠tulo inexistente, con el objetivo de ver si la API devolv√≠a un array vac√≠o. Sin embargo, la API devuelve todos los elementos que no tienen un autor o t√≠tulo que coincidan con el valor buscado. As√≠ que este test tambi√©n permite detectar esos elementos.\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts?author=Author 3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts"
									],
									"query": [
										{
											"key": "author",
											"value": "Author 3"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Put Tests",
					"item": [
						{
							"name": "Create the TestPost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que la respuesta contenga un post con el id esperado para verificar que se ha creado correctamente\r",
											"pm.test(\"‚úÖ Post de prueba creado\", function () {\r",
											"    const json = pm.response.json();\r",
											"\r",
											"    pm.expect(json).to.have.property(\"id\", \"qa-test-1\");\r",
											"\r",
											"    // Se a√±ade un console.log para revisar el contenido exacto del post creado\r",
											"    console.log(\"‚úîÔ∏è Post creado para pruebas:\", json);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"qa-test-1\",\r\n    \"title\": \"Original Title\",\r\n    \"author\": \"Test Author\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/posts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify only Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que el t√≠tulo del post haya sido modificado correctamente\r",
											"pm.test(\"üîÅ Post modificado con nuevo t√≠tulo\", function () {\r",
											"    const json = pm.response.json();\r",
											"\r",
											"    pm.expect(json.title).to.eql(\"T√≠tulo Modificado\");\r",
											"\r",
											"    // Se a√±ade un console.log para verificar qu√© valor tiene el t√≠tulo tras la actualizaci√≥n\r",
											"    console.log(\"‚úèÔ∏è T√≠tulo actualizado:\", json);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"qa-test-1\",\r\n    \"title\": \"T√≠tulo Modificado\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/posts/qa-test-1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts",
										"qa-test-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review Modifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que el valor del campo 'author' sea el actualizado correctamente\r",
											"pm.test(\"üîç Verificaci√≥n de autor actualizado\", function () {\r",
											"    const json = pm.response.json();\r",
											"\r",
											"    pm.expect(json.author).to.eql(\"Test Author\");\r",
											"\r",
											"    // Se a√±ade un console.log para confirmar visualmente el valor del campo 'author'\r",
											"    console.log(\"‚úÖ Autor verificado:\", json.author);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts/qa-test-1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts",
										"qa-test-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete TestPost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que el c√≥digo de estado sea 200 para confirmar que el post ha sido eliminado correctamente\r",
											"pm.test(\"üóëÔ∏è Post eliminado correctamente\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"\r",
											"    // Se a√±ade un console.log para confirmar que el post fue eliminado con √©xito\r",
											"    console.log(\"‚úÖ Post eliminado con √©xito\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts/qa-test-1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts",
										"qa-test-1"
									]
								}
							},
							"response": []
						}
					],
					"description": "I tried using PUT to add information to the API without it deleting the unmentioned parts, but it didn't work as expected, since PUT is meant to replace the entire element."
				},
				{
					"name": "Patch Test",
					"item": [
						{
							"name": "Create the TestPost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se verifica que el post de prueba se haya creado correctamente con el ID 'qa-test-1'\r",
											"pm.test(\"‚úÖ Post de prueba creado\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.have.property(\"id\", \"qa-test-1\");\r",
											"\r",
											"    // Se a√±ade un console.log para revisar los detalles del post creado\r",
											"    console.log(\"‚úîÔ∏è Post creado para pruebas:\", json);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"qa-test-1\",\r\n    \"title\": \"Original Title\",\r\n    \"author\": \"Test Author\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/posts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify only Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que el post ha sido modificado correctamente con el nuevo t√≠tulo\r",
											"pm.test(\"üîÅ Post modificado con nuevo t√≠tulo\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json.title).to.eql(\"T√≠tulo Modificado\");\r",
											"\r",
											"    // Se a√±ade un console.log para verificar los cambios en el t√≠tulo del post\r",
											"    console.log(\"‚úèÔ∏è T√≠tulo actualizado:\", json);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"qa-test-1\",\r\n    \"title\": \"T√≠tulo Modificado\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/posts/qa-test-1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts",
										"qa-test-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review Modifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se comprueba que el autor ha sido actualizado correctamente\r",
											"pm.test(\"üîç Verificaci√≥n de autor actualizado\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json.author).to.eql(\"Autor Modificado\");\r",
											"\r",
											"    // Se a√±ade un console.log para verificar que el autor se ha actualizado correctamente\r",
											"    console.log(\"‚úÖ Autor verificado:\", json.author);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts/qa-test-1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts",
										"qa-test-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete TestPost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Se verifica que el post se haya eliminado correctamente y se devuelve un c√≥digo 200\r",
											"pm.test(\"üóëÔ∏è Post eliminado correctamente\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"\r",
											"    // Se a√±ade un console.log para confirmar que el post fue eliminado con √©xito\r",
											"    console.log(\"‚úÖ Post eliminado con √©xito\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/posts/qa-test-1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"posts",
										"qa-test-1"
									]
								}
							},
							"response": []
						}
					],
					"description": "I tried using PATCH to add information to the API without it deleting the unmentioned parts, as it's supposed to do, but it behaved exactly like PUT. So, neither I nor ChatGPT knows what went wrong there"
				}
			],
			"description": "I created a series of tests to check if:\n\n- You can retrieve information from the API in different ways and how the API behaves when the tag is empty or non-existent.\n    \n- You can add info without it deleting all the existing data (it doesn't work).\n    \n- You can patch or update a piece of info without it rewriting everything and deleting the extra content (it doesn't work)."
		},
		{
			"name": "Comments - Does It work - Tests",
			"item": [
				{
					"name": "Get All Comments - Check current content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the status of the response\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"‚úÖ Status code is 200\");\r",
									"});\r",
									"\r",
									"// Check that the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    console.log(\"‚úÖ Response is an array\");\r",
									"});\r",
									"\r",
									"// Check that each comment has an 'id' property\r",
									"pm.test(\"Each comment has 'id' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const commentsWithoutId = jsonData.filter(comment => !comment.hasOwnProperty('id'));\r",
									"    \r",
									"    if (commentsWithoutId.length === 0) {\r",
									"        console.log(\"‚úÖ All comments have an 'id' property\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${commentsWithoutId.length} comments missing 'id':`);\r",
									"        commentsWithoutId.forEach((comment, index) => {\r",
									"            console.log(`- Comment at position ${index}:`, comment);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(commentsWithoutId.length).to.eql(0, `Found ${commentsWithoutId.length} comments without 'id'`);\r",
									"});\r",
									"\r",
									"// Check that each comment has a 'body' property\r",
									"pm.test(\"Each comment has 'body' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const commentsWithoutBody = jsonData.filter(comment => !comment.hasOwnProperty('body'));\r",
									"    \r",
									"    if (commentsWithoutBody.length === 0) {\r",
									"        console.log(\"‚úÖ All comments have a 'body' property\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${commentsWithoutBody.length} comments missing 'body':`);\r",
									"        commentsWithoutBody.forEach(comment => {\r",
									"            console.log(`- ID: ${comment.id || 'no ID'}, Comment:`, comment);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(commentsWithoutBody.length).to.eql(0, `Found ${commentsWithoutBody.length} comments without 'body'`);\r",
									"});\r",
									"\r",
									"// Check that each comment has a 'postId' property\r",
									"pm.test(\"Each comment has 'postId' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const commentsWithoutPostId = jsonData.filter(comment => !comment.hasOwnProperty('postId'));\r",
									"    \r",
									"    if (commentsWithoutPostId.length === 0) {\r",
									"        console.log(\"‚úÖ All comments have a 'postId' property\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${commentsWithoutPostId.length} comments missing 'postId':`);\r",
									"        commentsWithoutPostId.forEach(comment => {\r",
									"            console.log(`- ID: ${comment.id || 'no ID'}, Comment:`, comment);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(commentsWithoutPostId.length).to.eql(0, `Found ${commentsWithoutPostId.length} comments without 'postId'`);\r",
									"});\r",
									"\r",
									"// Check for duplicate IDs in comments\r",
									"pm.test(\"No duplicate comment IDs\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const ids = jsonData.map(comment => comment.id);\r",
									"    const seen = new Set();\r",
									"    const duplicates = [];\r",
									"\r",
									"    ids.forEach(id => {\r",
									"        if (seen.has(id)) {\r",
									"            duplicates.push(id);\r",
									"        } else {\r",
									"            seen.add(id);\r",
									"        }\r",
									"    });\r",
									"\r",
									"    if (duplicates.length === 0) {\r",
									"        console.log(\"‚úÖ No duplicate IDs found\");\r",
									"    } else {\r",
									"        console.log(`‚ùå Found ${duplicates.length} duplicate IDs:`);\r",
									"        duplicates.forEach(dup => {\r",
									"            console.log(`- Duplicate ID: ${dup}`);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(duplicates.length).to.eql(0, `Found ${duplicates.length} duplicate comment IDs`);\r",
									"});\r",
									"\r",
									"// Log full content of all comments\r",
									"pm.test(\"Log full content of all comments\", function () {\r",
									"    const data = pm.response.json();\r",
									"    console.log(\"üìã Full content of all comments:\");\r",
									"    console.log(JSON.stringify(data, null, 2));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Comment - Create a new Comment to play with",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    console.log(\"‚úÖ Comment created successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the created comment\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"id\", \"1234\");\r",
									"    pm.expect(responseData).to.have.property(\"body\", \"This is a new test comment\");\r",
									"    pm.expect(responseData).to.have.property(\"postId\", 1);\r",
									"\r",
									"    console.log(\"üì¶ Comment created successfully:\");\r",
									"    console.log(responseData);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"1234\",\r\n  \"body\": \"This is a new test comment\",\r\n  \"postId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Comment - Modify the Created Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (successful update)\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    console.log(\"‚úÖ Comment updated successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"The updated comment has the new values\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data).to.have.property(\"id\", \"1234\");\r",
									"    pm.expect(data).to.have.property(\"body\", \"Updated comment text\");\r",
									"    pm.expect(data).to.have.property(\"postId\", 1);\r",
									"\r",
									"    console.log(\"üîÑ Updated comment data:\");\r",
									"    console.log(data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"1234\",\r\n  \"body\": \"Updated comment text\",\r\n  \"postId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments/1234",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"1234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Comment ID - Check if the Comment got Modified",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - Comment exists\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    console.log(\"üì• Comment found successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Comment contains the expected data\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data).to.have.property(\"id\", \"1234\");\r",
									"    pm.expect(data).to.have.property(\"body\", \"Updated comment text\");\r",
									"    pm.expect(data).to.have.property(\"postId\", 1);\r",
									"\r",
									"    console.log(\"üìÑ Comment content:\");\r",
									"    console.log(data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments/1234",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"1234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Comments - Check If we have accidentally created more than 1 TestComment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check for duplicate comment IDs\", function () {\r",
									"    const data = pm.response.json();\r",
									"    const ids = data.map(c => c.id);\r",
									"    const duplicates = ids.filter((id, index) => ids.indexOf(id) !== index);\r",
									"\r",
									"    if (duplicates.length > 0) {\r",
									"        console.log(\"‚ùå Duplicate IDs found:\", duplicates);\r",
									"    } else {\r",
									"        console.log(\"‚úÖ No duplicate IDs found\");\r",
									"    }\r",
									"\r",
									"    pm.expect(duplicates.length).to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comments ID - Delete the created Comment to clean up the API content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204 - Comment deleted\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"    console.log(\"üóëÔ∏è Comment with id '1234' deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments/1234",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"1234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Comments - We Check current content to see if we have \"cleaned\" properly",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the status of the response\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"‚úÖ Status code is 200\");\r",
									"});\r",
									"\r",
									"// Check that the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    console.log(\"‚úÖ Response is an array\");\r",
									"});\r",
									"\r",
									"// Check that each comment has an 'id' property\r",
									"pm.test(\"Each comment has 'id' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const commentsWithoutId = jsonData.filter(comment => !comment.hasOwnProperty('id'));\r",
									"    \r",
									"    if (commentsWithoutId.length === 0) {\r",
									"        console.log(\"‚úÖ All comments have an 'id' property\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${commentsWithoutId.length} comments missing 'id':`);\r",
									"        commentsWithoutId.forEach((comment, index) => {\r",
									"            console.log(`- Comment at position ${index}:`, comment);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(commentsWithoutId.length).to.eql(0, `Found ${commentsWithoutId.length} comments without 'id'`);\r",
									"});\r",
									"\r",
									"// Check that each comment has a 'body' property\r",
									"pm.test(\"Each comment has 'body' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const commentsWithoutBody = jsonData.filter(comment => !comment.hasOwnProperty('body'));\r",
									"    \r",
									"    if (commentsWithoutBody.length === 0) {\r",
									"        console.log(\"‚úÖ All comments have a 'body' property\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${commentsWithoutBody.length} comments missing 'body':`);\r",
									"        commentsWithoutBody.forEach(comment => {\r",
									"            console.log(`- ID: ${comment.id || 'no ID'}, Comment:`, comment);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(commentsWithoutBody.length).to.eql(0, `Found ${commentsWithoutBody.length} comments without 'body'`);\r",
									"});\r",
									"\r",
									"// Check that each comment has a 'postId' property\r",
									"pm.test(\"Each comment has 'postId' property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const commentsWithoutPostId = jsonData.filter(comment => !comment.hasOwnProperty('postId'));\r",
									"    \r",
									"    if (commentsWithoutPostId.length === 0) {\r",
									"        console.log(\"‚úÖ All comments have a 'postId' property\");\r",
									"    } else {\r",
									"        console.log(`‚ùå ${commentsWithoutPostId.length} comments missing 'postId':`);\r",
									"        commentsWithoutPostId.forEach(comment => {\r",
									"            console.log(`- ID: ${comment.id || 'no ID'}, Comment:`, comment);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(commentsWithoutPostId.length).to.eql(0, `Found ${commentsWithoutPostId.length} comments without 'postId'`);\r",
									"});\r",
									"\r",
									"// Check for duplicate IDs in comments\r",
									"pm.test(\"No duplicate comment IDs\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const ids = jsonData.map(comment => comment.id);\r",
									"    const seen = new Set();\r",
									"    const duplicates = [];\r",
									"\r",
									"    ids.forEach(id => {\r",
									"        if (seen.has(id)) {\r",
									"            duplicates.push(id);\r",
									"        } else {\r",
									"            seen.add(id);\r",
									"        }\r",
									"    });\r",
									"\r",
									"    if (duplicates.length === 0) {\r",
									"        console.log(\"‚úÖ No duplicate IDs found\");\r",
									"    } else {\r",
									"        console.log(`‚ùå Found ${duplicates.length} duplicate IDs:`);\r",
									"        duplicates.forEach(dup => {\r",
									"            console.log(`- Duplicate ID: ${dup}`);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.expect(duplicates.length).to.eql(0, `Found ${duplicates.length} duplicate comment IDs`);\r",
									"});\r",
									"\r",
									"// Log full content of all comments\r",
									"pm.test(\"Log full content of all comments\", function () {\r",
									"    const data = pm.response.json();\r",
									"    console.log(\"üìã Full content of all comments:\");\r",
									"    console.log(JSON.stringify(data, null, 2));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						}
					},
					"response": []
				}
			],
			"description": "The same tests but for the comments"
		},
		{
			"name": "Comments - It Breaks?",
			"item": [
				{
					"name": "Get by Tests",
					"item": [
						{
							"name": "Same ID Test",
							"item": [
								{
									"name": "Post comments - Create a new comment to play with",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 or 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"    console.log(\"‚úÖ Second comment created successfully\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains the created comment\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property(\"id\", \"comment-dup-001\");\r",
													"    pm.expect(responseData).to.have.property(\"body\", \"Second comment for duplicate test\");\r",
													"    pm.expect(responseData).to.have.property(\"postId\", 1);\r",
													"\r",
													"    console.log(\"üì¶ Second comment created:\");\r",
													"    console.log(responseData);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"comment-dup-001\",\r\n  \"body\": \"Second comment for duplicate test\",\r\n  \"postId\": 1\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/comments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Comments - Create a second Comments to play with",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 or 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"    console.log(\"‚úÖ Second comment created successfully\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains the created comment\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property(\"id\", \"comment-dup-001\");\r",
													"    pm.expect(responseData).to.have.property(\"body\", \"Second comment for duplicate test\");\r",
													"    pm.expect(responseData).to.have.property(\"postId\", 1);\r",
													"\r",
													"    console.log(\"üì¶ Second comment created:\");\r",
													"    console.log(responseData);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"comment-dup-001\",\r\n  \"body\": \"Second comment for duplicate test\",\r\n  \"postId\": 1\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/comments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get by ID - 2 Comments Same ID?",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET by existing ID - Comment 'comment-dup-001'\", function () {\r",
													"    const comment = pm.response.json();\r",
													"    console.log(\"API Response:\", comment); // Ver qu√© datos est√° devolviendo la API\r",
													"\r",
													"    pm.expect(comment.id).to.eql(\"comment-dup-001\");\r",
													"    pm.expect(comment.body).to.eql(\"Second comment for duplicate test\");\r",
													"    pm.expect(comment.postId).to.eql(1);\r",
													"    console.log(\"‚úÖ Comment with ID 'comment-dup-001' found successfully:\", comment);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/comments/comment-dup-001",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"comments",
												"comment-dup-001"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Comments ID - Delete the created Comments to clean up the API content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code es 200 o 204 - Post eliminado\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]); // Verificar que el c√≥digo de respuesta es 200 o 204\r",
													"    console.log(\"üóëÔ∏è Post con id 'comment-dup-001' eliminado correctamente\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/comments/comment-dup-001",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"comments",
												"comment-dup-001"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Comments ID - Delete the created Comments to clean up the API content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code es 200 o 204 - Post eliminado\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204,]); // Verificar que el c√≥digo de respuesta es 200 o 204\r",
													"    console.log(\"üóëÔ∏è Post con id 'comment-dup-001' eliminado correctamente\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:3000/comments/comment-dup-001",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"comments",
												"comment-dup-001"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Post Comment - Create a new Comment to play with Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 or 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"    console.log(\"‚úÖ Comment created successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains the created comment\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.have.property(\"id\", \"1234\");\r",
											"    pm.expect(responseData).to.have.property(\"body\", \"This is a new test comment\");\r",
											"    pm.expect(responseData).to.have.property(\"postId\", 1);\r",
											"\r",
											"    console.log(\"üì¶ Comment created successfully:\");\r",
											"    console.log(responseData);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"1234\",\r\n  \"body\": \"This is a new test comment\",\r\n  \"postId\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET comment by ID - should return one comment\", function () {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data).to.have.property(\"id\", \"1234\");\r",
											"    pm.expect(data).to.have.property(\"body\");\r",
											"    pm.expect(data).to.have.property(\"postId\");\r",
											"    console.log(\"‚úÖ Comment fetched by ID:\", data);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/comments/1234",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"comments",
										"1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET comments by body - should return matching comments\", function () {\r",
											"    const data = pm.response.json();\r",
											"    const filtered = data.filter(c => c.body === \"some comment\");\r",
											"\r",
											"    if (filtered.length > 0) {\r",
											"        console.log(\"üßæ Matching comments by body found:\", filtered);\r",
											"    } else {\r",
											"        console.log(\"‚ùå No comments found with body = 'some comment'\");\r",
											"    }\r",
											"\r",
											"    pm.expect(filtered.length).to.be.at.least(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/comments?body=some comment",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "body",
											"value": "some comment"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by Postid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET comments by postId - should return related comments\", function () {\r",
											"    const data = pm.response.json();\r",
											"    const filtered = data.filter(c => c.postId === 1);\r",
											"\r",
											"    if (filtered.length > 0) {\r",
											"        console.log(\"üßæ Comments found for postId = 1:\", filtered);\r",
											"    } else {\r",
											"        console.log(\"‚ùå No comments found for postId = 1\");\r",
											"    }\r",
											"\r",
											"    pm.expect(filtered.length).to.be.at.least(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/comments?postId=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "postId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by ID - No ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET by non-existent ID returns 404 or empty\", function () {\r",
											"    const status = pm.response.code;\r",
											"    if (status === 404) {\r",
											"        console.log(\"‚úÖ Comment with non-existent ID not found. Status 404.\");\r",
											"    } else if (status === 200 && Object.keys(pm.response.json()).length === 0) {\r",
											"        console.log(\"‚ö†Ô∏è Status 200 but empty object. Comment does not exist.\");\r",
											"    } else {\r",
											"        console.log(\"‚ùå Unexpected behavior when requesting non-existent ID. Status:\", status);\r",
											"    }\r",
											"    pm.expect([404, 200]).to.include(status);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/comments/9999",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"comments",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by Title - No Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET by non-existent body returns empty array\", function () {\r",
											"    const data = pm.response.json();\r",
											"    \r",
											"    if (Array.isArray(data) && data.length === 0) {\r",
											"        console.log(\"‚úÖ No comments found with non-existent body (empty array)\");\r",
											"    } else {\r",
											"        console.log(\"‚ùå Unexpected result. Comments found with non-existent body:\", data);\r",
											"    }\r",
											"\r",
											"    pm.expect(data).to.be.an('array');\r",
											"    pm.expect(data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"//La idea de este test era ver que pasaba si se hacia un get de un elemento que no existia en base a las distintas caracteristicas, no obstante, la API devuelve todos los elementos que no tienen un tag author o tittle que coinciden con el valor buscado, asi que he aprovechado este test para detectar dichos elementos."
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/comments?body=this body does not exist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "body",
											"value": "this body does not exist"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by author - No PostId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET by non-existent postId returns empty array\", function () {\r",
											"    const data = pm.response.json();\r",
											"    \r",
											"    if (Array.isArray(data) && data.length === 0) {\r",
											"        console.log(\"‚úÖ No comments found for non-existent postId (empty array)\");\r",
											"    } else {\r",
											"        console.log(\"‚ùå Unexpected result. Comments found with non-existent postId:\", data);\r",
											"    }\r",
											"\r",
											"    pm.expect(data).to.be.an('array');\r",
											"    pm.expect(data.length).to.eql(0);\r",
											"});\r",
											"\r",
											"//La idea de este test era ver que pasaba si se hacia un get de un elemento que no existia en base a las distintas caracteristicas, no obstante, la API devuelve todos los elementos que no tienen un tag author o tittle que coinciden con el valor buscado, asi que he aprovechado este test para detectar dichos elementos."
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/comments?postId=999999",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "postId",
											"value": "999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comments ID - Delete the created Comment to clean up the API content Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 204 - Comment deleted\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
											"    console.log(\"üóëÔ∏è Comment with id '1234' deleted successfully\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/comments/1234",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"comments",
										"1234"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "The same tests but for the comments"
		},
		{
			"name": "Get Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Se comprueba que el c√≥digo de respuesta sea 200, lo cual indica que la petici√≥n fue exitosa\r",
							"pm.test(\"Status code is 200 for GET /profile\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200); // Aseguramos que el c√≥digo de respuesta es 200\r",
							"});\r",
							"\r",
							"//Se verifica que el perfil contiene el campo 'name' con el valor esperado\r",
							"pm.test(\"The profile contains the correct name\", function () {\r",
							"    const profile = pm.response.json(); // Parseamos la respuesta JSON\r",
							"    pm.expect(profile).to.have.property(\"name\", \"typicode\"); // Comprobamos que 'name' es 'typicode'\r",
							"    console.log(\"Profile data:\", profile); //Se a√±ade un console.log para visualizar los datos del perfil\r",
							"});\r",
							"\r",
							"//Se comprueba que los datos del perfil existen y contienen la propiedad 'name'\r",
							"pm.test(\"Profile data exists and has 'name' property\", function () {\r",
							"    const profile = pm.response.json();\r",
							"    pm.expect(profile).to.be.an(\"object\"); // Aseguramos que la respuesta es un objeto\r",
							"    pm.expect(profile).to.have.property(\"name\"); // Verificamos que existe la propiedad 'name'\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/profile",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"profile"
					]
				}
			},
			"response": []
		}
	]
}